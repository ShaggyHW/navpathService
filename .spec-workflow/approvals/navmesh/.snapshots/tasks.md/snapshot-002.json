{
  "id": "snapshot_1760119724924_c0zd7qxe1",
  "approvalId": "approval_1760119659963_8r4zya2p9",
  "approvalTitle": "Approve Tasks for navmesh spec (region-based navmesh)",
  "version": 2,
  "timestamp": "2025-10-10T18:08:44.924Z",
  "trigger": "approved",
  "status": "pending",
  "content": "# Tasks Document\n\n- [ ] 1. Create SQLite schema and writers\n  - File: navpath/navmesh_build/schema.py\n  - Purpose: Define DDL for `nav_regions`, `nav_region_edges`, `region_tiles`, `metadata` and provide batched insert helpers + index creation.\n  - _Leverage: navpath/db.py, navpath/cost.py_\n  - _Requirements: 7, 4_\n  - _Prompt: Implement the task for spec navmesh, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Python engineer with strong SQLite experience | Task: Create schema.py with functions to create tables and indexes, and batched insert helpers (create_schema, insert_regions, insert_region_tiles, insert_edges, insert_metadata) according to requirements §7 and determinism needs in §4 | Restrictions: Parameterized SQL only, no raw string interpolation; ensure deterministic index and insertion order; no foreign keys; enable PRAGMAs only in writer module | _Leverage: navpath/db.py for connection patterns, navpath/cost.py for defaults | _Requirements: 7, 4 | Success: Running schema functions creates tables and indexes exactly as specified; inserts succeed in batches; indices exist and are used | Instructions: Before starting, open `.spec-workflow/specs/navmesh/tasks.md` and change this task's checkbox from `[ ]` to `[-]`; when complete, change `[-]` to `[x]`._\n\n- [ ] 2. Implement Regionizer (tile → region grouping)\n  - File: navpath/navmesh_build/regionizer.py\n  - Purpose: Group contiguous walkable tiles into deterministic regions per plane using 4-neighbor connectivity, honoring `allowed_directions`/`blocked_directions` and not crossing door boundaries.\n  - _Leverage: navpath/db.py (tiles access), navpath/graph.py (allowed_directions semantics)_\n  - _Requirements: 1, 4_\n  - _Prompt: Implement the task for spec navmesh, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Algorithms engineer | Task: Stream tiles by plane and perform deterministic flood-fill/union-find to assign region IDs; compute bbox and area; emit tiles→region mapping; do not merge across diagonal-only contacts and treat blocked directions as boundaries | Restrictions: Deterministic traversal order (plane asc, y asc, x asc); do not load all tiles if avoidable; do not cross door boundaries | _Leverage: navpath/db.Database.fetch_tile and iteration patterns | _Requirements: 1, 4 | Success: Deterministic region IDs; stable results across runs; mapping covers all walkable tiles | Instructions: Before starting, open `.spec-workflow/specs/navmesh/tasks.md` and change this task's checkbox from `[ ]` to `[-]`; when complete, change `[-]` to `[x]`._\n\n- [ ] 3. Build region adjacencies\n  - File: navpath/navmesh_build/adjacency.py\n  - Purpose: Derive movement edges between neighboring regions that share at least one valid side transition along the border.\n  - _Leverage: navpath/cost.py (DEFAULT_STEP_COST_MS), navpath/db.py_\n  - _Requirements: 1, 3, 7_\n  - _Prompt: Implement the task for spec navmesh, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Graph engineer | Task: Scan region borders and add `type=\"move\"` edges with base movement weight; store representative border sample in meta; dedupe edges deterministically | Restrictions: Do not infer diagonal-only adjacencies; deterministic ordering and deduping | _Leverage: regionizer outputs and cost constants | _Requirements: 1, 3, 7 | Success: Region graph contains only valid adjacencies with consistent weights and metadata | Instructions: Before starting, open `.spec-workflow/specs/navmesh/tasks.md` and change this task's checkbox from `[ ]` to `[-]`; when complete, change `[-]` to `[x]`._\n\n- [ ] 4. Extract door connectors (region edges)\n  - File: navpath/navmesh_build/connectors.py\n  - Purpose: Map `door_nodes` inside/outside tiles to regions and add directed edges with metadata and costs.\n  - _Leverage: navpath/db.py (iter_door_nodes, DoorNodeRow), navpath/cost.py_\n  - _Requirements: 2, 3, 7_\n  - _Prompt: Implement the task for spec navmesh, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Python engineer familiar with DB-backed navigation | Task: For each door node, find source/destination regions and emit `type=\"door\"` edges with cost and metadata (direction, real_id_open/closed, open_action, requirement_id) | Restrictions: Deterministic processing order; skip if destination region is missing | _Leverage: db accessors, region map | _Requirements: 2, 3, 7 | Success: All valid doors produce edges; orphan doors warned and skipped; metadata preserved | Instructions: Before starting, open `.spec-workflow/specs/navmesh/tasks.md` and change this task's checkbox from `[ ]` to `[-]`; when complete, change `[-]` to `[x]`._\n\n- [ ] 5. Extract lodestone connectors (region edges)\n  - File: navpath/navmesh_build/connectors.py\n  - Purpose: Add edges from any region to the destination region for each lodestone, with requirement gating metadata.\n  - _Leverage: navpath/db.py (iter_lodestone_nodes), navpath/cost.py_\n  - _Requirements: 2, 3, 7_\n  - _Prompt: Implement the task for spec navmesh, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Python engineer | Task: Create `type=\"lodestone\"` edges to the destination region; include lodestone id/name and requirement metadata; cost from DB or default | Restrictions: Skip when destination region missing; deterministic order | _Leverage: db, region map | _Requirements: 2, 3, 7 | Success: Lodestone edges present and valid; metadata accurate | Instructions: Before starting, open `.spec-workflow/specs/navmesh/tasks.md` and change this task's checkbox from `[ ]` to `[-]`; when complete, change `[-]` to `[x]`._\n\n- [ ] 6. Extract object/NPC/ifslot/item connectors (region edges)\n  - File: navpath/navmesh_build/connectors.py\n  - Purpose: Convert nodes to region edges by selecting deterministic destination tiles within bounds and mapping origin/dest to regions; store chain-related raw fields.\n  - _Leverage: navpath/db.py (iter_object_nodes, iter_npc_nodes, iter_ifslot_nodes, iter_item_nodes), navpath/graph.py (dest tile selection semantics)\n  - _Requirements: 2, 3, 7_\n  - _Prompt: Implement the task for spec navmesh, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Python engineer | Task: For each node, pick deterministic dest tile (scan x then y; fallback plane rules), map to regions, create edges with `type` set and include head node id and raw `next_node_*` fields in meta; include action/object/npc/ifslot/item details | Restrictions: Skip when origin/dest region missing; deterministic processing | _Leverage: db accessors and selection logic mirroring `graph._select_dest_tile` | _Requirements: 2, 3, 7 | Success: Action edges created with stable metadata and weights; orphans warned and skipped | Instructions: Before starting, open `.spec-workflow/specs/navmesh/tasks.md` and change this task's checkbox from `[ ]` to `[-]`; when complete, change `[-]` to `[x]`._\n\n- [ ] 7. Provenance and metadata recording\n  - File: navpath/navmesh_build/provenance.py\n  - Purpose: Record input path hash, schema snapshot, build timestamp, tool version, and config hash in `metadata`.\n  - _Leverage: hashlib, sqlite3, pathlib_\n  - _Requirements: 4, 5, 7_\n  - _Prompt: Implement the task for spec navmesh, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Python engineer | Task: Compute hashes and write `metadata` rows; expose helper to produce summary dict used by reporter | Restrictions: Avoid non-deterministic fields except timestamp; separate provenance vs report stats | _Leverage: standard library | _Requirements: 4, 5, 7 | Success: `metadata` contains required keys; stable across runs for same inputs (except timestamp) | Instructions: Before starting, open `.spec-workflow/specs/navmesh/tasks.md` and change this task's checkbox from `[ ]` to `[-]`; when complete, change `[-]` to `[x]`._\n\n- [ ] 8. Build report and warnings\n  - File: navpath/navmesh_build/report.py\n  - Purpose: Summarize counts (regions, edges by type, planes, orphan counts) and print warnings; return nonzero exit codes on fatal errors.\n  - _Leverage: logging, click/argparse print, sqlite3 counts_\n  - _Requirements: 5_\n  - _Prompt: Implement the task for spec navmesh, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Python engineer | Task: Produce a build summary and warnings for orphans; define clear exit codes for fatal errors (input missing, DB locked, schema mismatch) | Restrictions: Keep logs readable; no noisy debug by default | _Leverage: standard library logging | _Requirements: 5 | Success: Clear summary printed; correct exit codes on errors | Instructions: Before starting, open `.spec-workflow/specs/navmesh/tasks.md` and change this task's checkbox from `[ ]` to `[-]`; when complete, change `[-]` to `[x]`._\n\n- [ ] 9. CLI entrypoint and orchestration\n  - File: navpath/navmesh_build/__main__.py\n  - Purpose: Provide `python -m navpath.navmesh_build` CLI to orchestrate reading input, building regions, connectors, and writing the SQLite output; support flags and dry-run.\n  - _Leverage: argparse, navpath/db.py, created modules (schema, regionizer, adjacency, connectors, provenance, report), navpath/cost.py_\n  - _Requirements: 6, 1, 2, 3, 4, 5, 7_\n  - _Prompt: Implement the task for spec navmesh, first run spec-workflow-guide to get the workflow guide then implement the task: Role: CLI/Platform engineer | Task: Implement CLI with flags: --input, --output, --planes, --dry-run, --overwrite, and cost overrides; run the build pipeline in deterministic order; on dry-run compute stats without writing DB | Restrictions: Do not overwrite output unless --overwrite; validate inputs; handle exceptions with proper exit codes | _Leverage: modules created in tasks 1–8 | _Requirements: 6 (+ others) | Success: CLI works per help text; dry-run prints summary; writing path creates a deterministic DB with indexes | Instructions: Before starting, open `.spec-workflow/specs/navmesh/tasks.md` and change this task's checkbox from `[ ]` to `[-]`; when complete, change `[-]` to `[x]`._\n\n- [ ] 10. Plane filter support\n  - File: navpath/navmesh_build/regionizer.py, navpath/navmesh_build/__main__.py\n  - Purpose: Filter processing to specified planes; skip others.\n  - _Leverage: argparse parsing of list/all, db queries_\n  - _Requirements: 6, 1_\n  - _Prompt: Implement the task for spec navmesh, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Python engineer | Task: Implement plane selection logic and ensure all builders respect it | Restrictions: Deterministic ordering; robust parsing of plane lists | _Leverage: regionizer + CLI | _Requirements: 6, 1 | Success: Builds only requested planes and reports filtered counts | Instructions: Before starting, open `.spec-workflow/specs/navmesh/tasks.md` and change this task's checkbox from `[ ]` to `[-]`; when complete, change `[-]` to `[x]`._\n\n- [ ] 11. Index creation and verification\n  - File: navpath/navmesh_build/schema.py\n  - Purpose: Create required indexes and verify their existence post-creation.\n  - _Leverage: sqlite_master checks, schema DDL_\n  - _Requirements: 7_\n  - _Prompt: Implement the task for spec navmesh, first run spec-workflow-guide to get the workflow guide then implement the task: Role: SQLite engineer | Task: Ensure all indexes from requirements are present; add verification routine | Restrictions: Avoid duplicate index creation errors; idempotent | _Leverage: sqlite_master | _Requirements: 7 | Success: Verification reports all required indexes present | Instructions: Before starting, open `.spec-workflow/specs/navmesh/tasks.md` and change this task's checkbox from `[ ]` to `[-]`; when complete, change `[-]` to `[x]`._\n\n- [ ] 12. Validation of orphan specials\n  - File: navpath/navmesh_build/connectors.py, navpath/navmesh_build/report.py\n  - Purpose: Detect and count orphan special nodes (destinations without regions) and warn.\n  - _Leverage: connectors extraction flow_\n  - _Requirements: 5, 2_\n  - _Prompt: Implement the task for spec navmesh, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Python engineer | Task: Track orphans in connectors and surface counts in the report | Restrictions: Do not fail unless unrecoverable; keep messages actionable | _Leverage: report module | _Requirements: 5, 2 | Success: Orphans reported with counts and examples | Instructions: Before starting, open `.spec-workflow/specs/navmesh/tasks.md` and change this task's checkbox from `[ ]` to `[-]`; when complete, change `[-]` to `[x]`._\n",
  "fileStats": {
    "size": 12747,
    "lines": 86,
    "lastModified": "2025-10-10T18:07:24.238Z"
  },
  "comments": []
}